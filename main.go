package main

import (
	"crypto/tls"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"github.com/joho/godotenv"
)

type AutoGenerated struct {
	Computer struct {
		GroupsAccounts struct {
			ComputerGroupMemberships []string `json:"computer_group_memberships"`
			LocalAccounts            []struct {
				Name             string `json:"name"`
				Realname         string `json:"realname"`
				UID              string `json:"uid"`
				Home             string `json:"home"`
				HomeSize         string `json:"home_size"`
				HomeSizeMb       int    `json:"home_size_mb"`
				Administrator    bool   `json:"administrator"`
				FilevaultEnabled bool   `json:"filevault_enabled"`
			} `json:"local_accounts"`
			UserInventories struct {
				DisableAutomaticLogin bool `json:"disable_automatic_login"`
				User                  struct {
					Username                     string `json:"username"`
					PasswordHistoryDepth         string `json:"password_history_depth"`
					PasswordMinLength            string `json:"password_min_length"`
					PasswordMaxAge               string `json:"password_max_age"`
					PasswordMinComplexCharacters string `json:"password_min_complex_characters"`
					PasswordRequireAlphanumeric  string `json:"password_require_alphanumeric"`
				} `json:"user"`
			} `json:"user_inventories"`
		} `json:"groups_accounts"`
	} `json:"computer"`
}

type Certificates struct {
	Computer struct {
		Certificates []struct {
			CommonName   string `json:"common_name"`
			Identity     bool   `json:"identity"`
			ExpiresUtc   string `json:"expires_utc"`
			ExpiresEpoch int64  `json:"expires_epoch"`
			Name         string `json:"name"`
		} `json:"certificates"`
	} `json:"computer"`
}

type Jamf struct {
	Computers []struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"computers"`
}

func contains(s AutoGenerated, e string) bool {
	for _, group := range s.Computer.GroupsAccounts.ComputerGroupMemberships {
		if group == e {
			return true
		}
	}
	return false
}


func checkCompliance(certCN string) bool {

	jssURL := os.Getenv("JSS_URL") + "computers/id/"
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}

	// QueryEscape escapes the phone string so
	// it can be safely placed inside a URL query
	var computers = getComputers(certCN)
	log.Println(computers)
	var id = findComputer(certCN, computers)
	baseURL, _ := os.LookupEnv("JSS_URL")
	jssURL = baseURL + strconv.Itoa(id)

	// Build the request
	apiKey, _ := os.LookupEnv("API_KEY")
	req, err := http.NewRequest("GET", jssURL, nil)
	req.Header.Set("Authorization", apiKey)
	req.Header.Set("Accept", "application/json")
	if err != nil {
		log.Fatal("NewRequest: ", err)
		return false
	}

	// For control over HTTP client headers,
	// redirect policy, and other settings,
	// create a Client
	// A Client is an HTTP client
	client := &http.Client{}

	// Send the request via a client
	// Do sends an HTTP request and
	// returns an HTTP response
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal("Do: ", err)
		return false
	}

	// Callers should close resp.Body
	// when done reading from it
	// Defer the closing of the body
	defer resp.Body.Close()

	// Fill the record with the data from the JSON
	var record AutoGenerated

	// Use json.Decode for reading streams of JSON data
	if err := json.NewDecoder(resp.Body).Decode(&record); err != nil {
		log.Println(resp)
		log.Println("error in checkCompliance")
		log.Println(jssURL)
		log.Println(err)
	}





	//fmt.Println("Current Groups: \n", record.Computer.GroupsAccounts.ComputerGroupMemberships)
	fmt.Println("Device is compliant?: ", contains(record, "Compliant"))


	return contains(record, "Compliant")
}

func getComputers(certCN string) Jamf {

	jssURL := os.Getenv("JSS_URL") + "/computers"

	// Build the request
	apiKey, _ := os.LookupEnv("API_KEY")
	req, err := http.NewRequest("GET", jssURL, nil)
	req.Header.Set("Authorization", apiKey)
	req.Header.Set("Accept", "application/json")
	if err != nil {
		log.Fatal("NewRequest: ", err)
	}

	// For control over HTTP client headers,
	// redirect policy, and other settings,
	// create a Client
	// A Client is an HTTP client
	client := &http.Client{}

	// Send the request via a client
	// Do sends an HTTP request and
	// returns an HTTP response
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal("Do: ", err)
	}

	// Callers should close resp.Body
	// when done reading from it
	// Defer the closing of the body
	defer resp.Body.Close()

	// Fill the record with the data from the JSON
	var computers Jamf

	// Use json.Decode for reading streams of JSON data
	if err := json.NewDecoder(resp.Body).Decode(&computers); err != nil {
		log.Println(resp)
		log.Println("error in getComputers")
		log.Println(jssURL)
		log.Println(err)
	}
	return computers
}

func findComputer (certCN string, computers Jamf) int {
	found := false
	for _, c := range computers.Computers {
		found = searchCertificates(certCN, c.ID)
		if found {
			return c.ID
		}
	}
	return 0
}

func searchCertificates (certCN string, computerID int) bool {
	jssURL := ("https://ip-172-31-22-159.us-gov-west-1.compute.internal:8443/JSSResource/computers/id/" + strconv.Itoa(computerID) + "/subset/certificates")

	// Build the request
	req, err := http.NewRequest("GET", jssURL, nil)
	req.Header.Set("Authorization", "Basic emVyby1hcGk6I0UkUiVUXlkzZTRyNXQ2eQ==")
	req.Header.Set("Accept", "application/json")
	if err != nil {
		log.Fatal("NewRequest: ", err)
	}

	// For control over HTTP client headers,
	// redirect policy, and other settings,
	// create a Client
	// A Client is an HTTP client
	client := &http.Client{}

	// Send the request via a client
	// Do sends an HTTP request and
	// returns an HTTP response
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal("Do: ", err)


	}

	// Callers should close resp.Body
	// when done reading from it
	// Defer the closing of the body
	defer resp.Body.Close()

	// Fill the record with the data from the JSON
	var certs Certificates

	// Use json.Decode for reading streams of JSON data
	if err := json.NewDecoder(resp.Body).Decode(&certs); err != nil {
		log.Println(resp)
		log.Println("error in searchCertificates")
		log.Println(jssURL)
		fmt.Println(err)
	}

	for _, c := range certs.Computer.Certificates {
		if c.CommonName == certCN {
			return true
		}
	}
	return false;

}

func complianceEngine(w http.ResponseWriter, r *http.Request) {

	fmt.Println("User-Agent: ", r.Header.Get("User-Agent"))
	fmt.Println("Certificate DN: ", r.Header.Get("X-SSL-CERT-DN"))
	parse := strings.Split(r.Header.Get("X-SSL-CERT-DN"), "," )
	parse = strings.Split(parse[1], "=")
	fmt.Println("Certificate DN: ", parse[1])

	var certCN = parse[1]
	if checkCompliance(certCN) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("200 - Compliant Device"))
	} else {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("403 - Non-compliant device."))
	}
}

func init() {
	// loads values from .env into the system
	if err := godotenv.Load(); err != nil {
		log.Print("No .env file found")
	}
}

func main() {
	http.HandleFunc("/auth", complianceEngine)
	if err := http.ListenAndServe(":8080", nil); err != nil {
		panic(err)
	}
}